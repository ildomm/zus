// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetURLStatsHandlerFunc turns a function with the right signature into a get Url stats handler
type GetURLStatsHandlerFunc func(GetURLStatsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetURLStatsHandlerFunc) Handle(params GetURLStatsParams) middleware.Responder {
	return fn(params)
}

// GetURLStatsHandler interface for that can handle valid get Url stats params
type GetURLStatsHandler interface {
	Handle(GetURLStatsParams) middleware.Responder
}

// NewGetURLStats creates a new http.Handler for the get Url stats operation
func NewGetURLStats(ctx *middleware.Context, handler GetURLStatsHandler) *GetURLStats {
	return &GetURLStats{Context: ctx, Handler: handler}
}

/*GetURLStats swagger:route GET /hashes/{id} tokens getUrlStats

Get hahs info

Get hahs info

*/
type GetURLStats struct {
	Context *middleware.Context
	Handler GetURLStatsHandler
}

func (o *GetURLStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetURLStatsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
